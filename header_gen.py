import os
import time
import argparse


H_GUARD_NAME = ""


def add_include(include_path, output_stream):
    output_stream.write(f"#include \"{include_path}\"\n")


def gen_from_folder(folder_path, output_stream):
    print(f"Processing {folder_path} folder...")
    dir_files = os.listdir(folder_path)
    folder_path += '\\'
    for file in dir_files:
        if os.path.isfile(folder_path + file):
            if file[-2:] == ".h" or file[-4:] == ".hpp":
                add_include(folder_path + file, output_stream)
                print(f"Included {file}")
            else:
                print(f"Skipped {file}")
        elif os.path.isdir(folder_path + file):
            gen_from_folder(folder_path + file, output_stream)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("input", type=str, help="scan folder name")
    parser.add_argument("output", type=str, help="output file name")
    parser.add_argument("--hguard_name", type=str, help="header guard name")
    args = parser.parse_args()
    start_time = time.time()
    hguard = args.hguard_name
    try:
        with open(args.output, "w") as output:
            output.write("#pragma once\n\n")
            output.write("// Header file generated by Python script.\n\n")
            if hguard != "":
                output.write(f"#ifndef {hguard}\n#define {hguard}\n\n")
                gen_from_folder(args.input, output)
            if hguard != "":
                output.write(f"\n#endif //!{hguard}\n")
        print("=======================================================")
        print("Generation completed in {} seconds.".format("%.3f" % (time.time() - start_time)))
        print("=======================================================")
    except FileNotFoundError:
        print("Folder not found.")